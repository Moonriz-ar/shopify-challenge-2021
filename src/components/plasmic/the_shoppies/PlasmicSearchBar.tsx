// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w9YkCMoNAxdUdLu1fVbgUv
// Component: dttfoU6lxO

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: mca8JPO7Ivv/component
import Link from "../../Link"; // plasmic-import: IlC1hBC6tr/component
import Button from "../../Button"; // plasmic-import: WLQZ7PHxvJH/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 42omF9MzxmQp5/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_shoppies.module.css"; // plasmic-import: w9YkCMoNAxdUdLu1fVbgUv/projectcss
import sty from "./PlasmicSearchBar.module.css"; // plasmic-import: dttfoU6lxO/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: tXy0z4Cwj85/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: bGh_ZG8CEgo/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: -i3g9EMhH9P/icon

export type PlasmicSearchBar__VariantMembers = {};
export type PlasmicSearchBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearchBar__VariantsArgs;
export const PlasmicSearchBar__VariantProps = new Array<VariantPropType>();

export type PlasmicSearchBar__ArgsType = {};
type ArgPropType = keyof PlasmicSearchBar__ArgsType;
export const PlasmicSearchBar__ArgProps = new Array<ArgPropType>();

export type PlasmicSearchBar__OverridesType = {
  root?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  textInput?: p.Flex<typeof TextInput>;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
  link?: p.Flex<typeof Link>;
  button?: p.Flex<typeof Button>;
  searchButton?: p.Flex<"div">;
};

export interface DefaultSearchBarProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSearchBar__RenderFunc(props: {
  variants: PlasmicSearchBar__VariantsArgs;
  args: PlasmicSearchBar__ArgsType;
  overrides: PlasmicSearchBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h2
        data-plasmic-name={"h2"}
        data-plasmic-override={overrides.h2}
        className={classNames(
          projectcss.all,
          projectcss.h2,
          projectcss.__wab_text,
          sty.h2
        )}
      >
        {"Movie title"}
      </h2>
      {true ? (
        <TextInput
          data-plasmic-name={"textInput"}
          data-plasmic-override={overrides.textInput}
          className={classNames("__wab_instance", sty.textInput)}
          onChange={(...eventArgs) => {
            p.generateStateOnChangeProp($state, ["textInput", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }}
          placeholder={"John Wick 4" as const}
          showStartIcon={true}
          startIcon={
            true ? (
              <SearchsvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            ) : null
          }
          value={p.generateStateValueProp($state, ["textInput", "value"])}
        />
      ) : null}
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Link
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames("__wab_instance", sty.link)}
        />

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        >
          <div
            data-plasmic-name={"searchButton"}
            data-plasmic-override={overrides.searchButton}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.searchButton
            )}
          >
            {"search"}
          </div>
        </Button>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h2",
    "textInput",
    "svg",
    "freeBox",
    "link",
    "button",
    "searchButton"
  ],
  h2: ["h2"],
  textInput: ["textInput", "svg"],
  svg: ["svg"],
  freeBox: ["freeBox", "link", "button", "searchButton"],
  link: ["link"],
  button: ["button", "searchButton"],
  searchButton: ["searchButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  textInput: typeof TextInput;
  svg: "svg";
  freeBox: "div";
  link: typeof Link;
  button: typeof Button;
  searchButton: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchBar__VariantsArgs;
    args?: PlasmicSearchBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSearchBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSearchBar__ArgProps,
          internalVariantPropNames: PlasmicSearchBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchBar";
  } else {
    func.displayName = `PlasmicSearchBar.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchBar = Object.assign(
  // Top-level PlasmicSearchBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),
    searchButton: makeNodeComponent("searchButton"),

    // Metadata about props expected for PlasmicSearchBar
    internalVariantProps: PlasmicSearchBar__VariantProps,
    internalArgProps: PlasmicSearchBar__ArgProps
  }
);

export default PlasmicSearchBar;
/* prettier-ignore-end */
