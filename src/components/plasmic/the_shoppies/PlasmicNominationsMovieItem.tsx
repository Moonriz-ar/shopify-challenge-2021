// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w9YkCMoNAxdUdLu1fVbgUv
// Component: kIOmyFUrm1U

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MovieItemIcon from "../../MovieItemIcon"; // plasmic-import: XShnP_NaZ3/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_shoppies.module.css"; // plasmic-import: w9YkCMoNAxdUdLu1fVbgUv/projectcss
import sty from "./PlasmicNominationsMovieItem.module.css"; // plasmic-import: kIOmyFUrm1U/css

export type PlasmicNominationsMovieItem__VariantMembers = {};
export type PlasmicNominationsMovieItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicNominationsMovieItem__VariantsArgs;
export const PlasmicNominationsMovieItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicNominationsMovieItem__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicNominationsMovieItem__ArgsType;
export const PlasmicNominationsMovieItem__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicNominationsMovieItem__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  movieItemIcon?: p.Flex<typeof MovieItemIcon>;
};

export interface DefaultNominationsMovieItemProps {
  children?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNominationsMovieItem__RenderFunc(props: {
  variants: PlasmicNominationsMovieItem__VariantsArgs;
  args: PlasmicNominationsMovieItem__ArgsType;
  overrides: PlasmicNominationsMovieItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <MovieItemIcon
          data-plasmic-name={"movieItemIcon"}
          data-plasmic-override={overrides.movieItemIcon}
          _delete={true}
          className={classNames("__wab_instance", sty.movieItemIcon)}
        />

        {p.renderPlasmicSlot({
          defaultContents: "John Wick 4",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "movieItemIcon"],
  freeBox: ["freeBox", "movieItemIcon"],
  movieItemIcon: ["movieItemIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  movieItemIcon: typeof MovieItemIcon;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNominationsMovieItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNominationsMovieItem__VariantsArgs;
    args?: PlasmicNominationsMovieItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNominationsMovieItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNominationsMovieItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNominationsMovieItem__ArgProps,
          internalVariantPropNames: PlasmicNominationsMovieItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNominationsMovieItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNominationsMovieItem";
  } else {
    func.displayName = `PlasmicNominationsMovieItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNominationsMovieItem = Object.assign(
  // Top-level PlasmicNominationsMovieItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    movieItemIcon: makeNodeComponent("movieItemIcon"),

    // Metadata about props expected for PlasmicNominationsMovieItem
    internalVariantProps: PlasmicNominationsMovieItem__VariantProps,
    internalArgProps: PlasmicNominationsMovieItem__ArgProps
  }
);

export default PlasmicNominationsMovieItem;
/* prettier-ignore-end */
