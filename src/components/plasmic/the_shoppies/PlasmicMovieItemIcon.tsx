// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w9YkCMoNAxdUdLu1fVbgUv
// Component: XShnP_NaZ3

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_shoppies.module.css"; // plasmic-import: w9YkCMoNAxdUdLu1fVbgUv/projectcss
import sty from "./PlasmicMovieItemIcon.module.css"; // plasmic-import: XShnP_NaZ3/css

export type PlasmicMovieItemIcon__VariantMembers = {
  disabled: "disabled";
  _delete: "_delete";
};
export type PlasmicMovieItemIcon__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
  _delete?: SingleBooleanChoiceArg<"_delete">;
};
type VariantPropType = keyof PlasmicMovieItemIcon__VariantsArgs;
export const PlasmicMovieItemIcon__VariantProps = new Array<VariantPropType>(
  "disabled",
  "_delete"
);

export type PlasmicMovieItemIcon__ArgsType = {};
type ArgPropType = keyof PlasmicMovieItemIcon__ArgsType;
export const PlasmicMovieItemIcon__ArgProps = new Array<ArgPropType>();

export type PlasmicMovieItemIcon__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultMovieItemIconProps {
  disabled?: SingleBooleanChoiceArg<"disabled">;
  _delete?: SingleBooleanChoiceArg<"_delete">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicMovieItemIcon__RenderFunc(props: {
  variants: PlasmicMovieItemIcon__VariantsArgs;
  args: PlasmicMovieItemIcon__ArgsType;
  overrides: PlasmicMovieItemIcon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "disabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disabled
      },
      {
        path: "_delete",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._delete
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    (
      hasVariant($state, "disabled", "disabled") && triggers.hover_root
        ? true
        : true
    ) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.root_delete]: hasVariant($state, "_delete", "_delete"),
            [sty.rootdisabled]: hasVariant($state, "disabled", "disabled")
          }
        )}
        data-plasmic-trigger-props={[triggerRootHoverProps]}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.text_delete]: hasVariant($state, "_delete", "_delete"),
              [sty.textdisabled]: hasVariant($state, "disabled", "disabled")
            }
          )}
        >
          {hasVariant($state, "_delete", "_delete") ? "x" : "+"}
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMovieItemIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMovieItemIcon__VariantsArgs;
    args?: PlasmicMovieItemIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMovieItemIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMovieItemIcon__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMovieItemIcon__ArgProps,
          internalVariantPropNames: PlasmicMovieItemIcon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMovieItemIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMovieItemIcon";
  } else {
    func.displayName = `PlasmicMovieItemIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicMovieItemIcon = Object.assign(
  // Top-level PlasmicMovieItemIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicMovieItemIcon
    internalVariantProps: PlasmicMovieItemIcon__VariantProps,
    internalArgProps: PlasmicMovieItemIcon__ArgProps
  }
);

export default PlasmicMovieItemIcon;
/* prettier-ignore-end */
