// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w9YkCMoNAxdUdLu1fVbgUv
// Component: JXOduyYvIR

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NominationsMovieItem from "../../NominationsMovieItem"; // plasmic-import: kIOmyFUrm1U/component
import Link from "../../Link"; // plasmic-import: IlC1hBC6tr/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_shoppies.module.css"; // plasmic-import: w9YkCMoNAxdUdLu1fVbgUv/projectcss
import sty from "./PlasmicNominations.module.css"; // plasmic-import: JXOduyYvIR/css

export type PlasmicNominations__VariantMembers = {
  isEmpty: "isEmpty";
};
export type PlasmicNominations__VariantsArgs = {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
};
type VariantPropType = keyof PlasmicNominations__VariantsArgs;
export const PlasmicNominations__VariantProps = new Array<VariantPropType>(
  "isEmpty"
);

export type PlasmicNominations__ArgsType = {};
type ArgPropType = keyof PlasmicNominations__ArgsType;
export const PlasmicNominations__ArgProps = new Array<ArgPropType>();

export type PlasmicNominations__OverridesType = {
  root?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  movieItemsContainer?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  clearNominations?: p.Flex<typeof Link>;
};

export interface DefaultNominationsProps {
  isEmpty?: SingleBooleanChoiceArg<"isEmpty">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNominations__RenderFunc(props: {
  variants: PlasmicNominations__VariantsArgs;
  args: PlasmicNominations__ArgsType;
  overrides: PlasmicNominations__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isEmpty",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isEmpty
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h2
        data-plasmic-name={"h2"}
        data-plasmic-override={overrides.h2}
        className={classNames(
          projectcss.all,
          projectcss.h2,
          projectcss.__wab_text,
          sty.h2,
          { [sty.h2isEmpty]: hasVariant($state, "isEmpty", "isEmpty") }
        )}
      >
        {hasVariant($state, "isEmpty", "isEmpty")
          ? "Your nominations list is empty!"
          : "Your nominations"}
      </h2>
      {(hasVariant($state, "isEmpty", "isEmpty") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"movieItemsContainer"}
          data-plasmic-override={overrides.movieItemsContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.movieItemsContainer, {
            [sty.movieItemsContainerisEmpty]: hasVariant(
              $state,
              "isEmpty",
              "isEmpty"
            )
          })}
        >
          <NominationsMovieItem
            className={classNames(
              "__wab_instance",
              sty.nominationsMovieItem__yXh4U
            )}
          />

          <NominationsMovieItem
            className={classNames(
              "__wab_instance",
              sty.nominationsMovieItem___7S6Sr
            )}
          >
            {"Harry Potter"}
          </NominationsMovieItem>
          <NominationsMovieItem
            className={classNames(
              "__wab_instance",
              sty.nominationsMovieItem___6T0Tm
            )}
          >
            {"The Hobbit"}
          </NominationsMovieItem>
          <NominationsMovieItem
            className={classNames(
              "__wab_instance",
              sty.nominationsMovieItem__v9Odc
            )}
          >
            {"Pokemon"}
          </NominationsMovieItem>
        </p.Stack>
      ) : null}
      {(hasVariant($state, "isEmpty", "isEmpty") ? true : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxisEmpty]: hasVariant($state, "isEmpty", "isEmpty")
          })}
        >
          {(hasVariant($state, "isEmpty", "isEmpty") ? true : true) ? (
            <Link
              data-plasmic-name={"clearNominations"}
              data-plasmic-override={overrides.clearNominations}
              className={classNames("__wab_instance", sty.clearNominations, {
                [sty.clearNominationsisEmpty]: hasVariant(
                  $state,
                  "isEmpty",
                  "isEmpty"
                )
              })}
            />
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "movieItemsContainer", "freeBox", "clearNominations"],
  h2: ["h2"],
  movieItemsContainer: ["movieItemsContainer"],
  freeBox: ["freeBox", "clearNominations"],
  clearNominations: ["clearNominations"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  movieItemsContainer: "div";
  freeBox: "div";
  clearNominations: typeof Link;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNominations__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNominations__VariantsArgs;
    args?: PlasmicNominations__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNominations__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNominations__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNominations__ArgProps,
          internalVariantPropNames: PlasmicNominations__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNominations__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNominations";
  } else {
    func.displayName = `PlasmicNominations.${nodeName}`;
  }
  return func;
}

export const PlasmicNominations = Object.assign(
  // Top-level PlasmicNominations renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    movieItemsContainer: makeNodeComponent("movieItemsContainer"),
    freeBox: makeNodeComponent("freeBox"),
    clearNominations: makeNodeComponent("clearNominations"),

    // Metadata about props expected for PlasmicNominations
    internalVariantProps: PlasmicNominations__VariantProps,
    internalArgProps: PlasmicNominations__ArgProps
  }
);

export default PlasmicNominations;
/* prettier-ignore-end */
