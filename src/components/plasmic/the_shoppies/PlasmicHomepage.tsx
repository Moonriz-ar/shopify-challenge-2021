// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: w9YkCMoNAxdUdLu1fVbgUv
// Component: EM_oZrB6CcZo

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SearchBar from "../../SearchBar"; // plasmic-import: dttfoU6lxO/component
import SearchResults from "../../SearchResults"; // plasmic-import: cmM4gm4zl6/component
import Nominations from "../../Nominations"; // plasmic-import: JXOduyYvIR/component

import { useScreenVariants as useScreenVariantsa3NNzie5OThQ6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: A3NNzie5oThQ6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_the_shoppies.module.css"; // plasmic-import: w9YkCMoNAxdUdLu1fVbgUv/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: EM_oZrB6CcZo/css

export type PlasmicHomepage__VariantMembers = {
  isNominatedListFull: "isNominatedListFull";
};
export type PlasmicHomepage__VariantsArgs = {
  isNominatedListFull?: SingleBooleanChoiceArg<"isNominatedListFull">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "isNominatedListFull"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  home?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  link?: p.Flex<"a">;
  freeBox?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  searchBar?: p.Flex<typeof SearchBar>;
  searchResults?: p.Flex<typeof SearchResults>;
  nominations?: p.Flex<typeof Nominations>;
};

export interface DefaultHomepageProps {
  isNominatedListFull?: SingleBooleanChoiceArg<"isNominatedListFull">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isNominatedListFull",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.isNominatedListFull
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsa3NNzie5OThQ6()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.home,
            {
              [sty.homeisNominatedListFull]: hasVariant(
                $state,
                "isNominatedListFull",
                "isNominatedListFull"
              )
            }
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"The Shoppies"}
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q5HfT
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {"It's that time of the year to choose your "}
                  </React.Fragment>
                  {
                    <a
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        projectcss.plasmic_default__inline,
                        sty.link
                      )}
                      href={
                        "https://docs.google.com/document/d/13pa4onOfawHuSa7dJ9wzQmsBOU8hHPpXqCXUyeEXakQ/edit?usp=sharing" as const
                      }
                      target={"_blank" as const}
                    >
                      {"Shoppies"}
                    </a>
                  }
                  <React.Fragment>{" nominations üçø"}</React.Fragment>
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zxkoo
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Select your "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"top 5"}
                  </span>
                  <React.Fragment>
                    {
                      " movies of the year using the search bar below, your nominations will be saved even when leaving this site!"
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              {(
                hasVariant($state, "isNominatedListFull", "isNominatedListFull")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox, {
                    [sty.freeBoxisNominatedListFull]: hasVariant(
                      $state,
                      "isNominatedListFull",
                      "isNominatedListFull"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ksshi
                    )}
                  >
                    {"You have selected 5 nominations!"}
                  </div>
                </div>
              ) : null}
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__oCaoA)}
                >
                  <SearchBar
                    data-plasmic-name={"searchBar"}
                    data-plasmic-override={overrides.searchBar}
                    className={classNames("__wab_instance", sty.searchBar, {
                      [sty.searchBarisNominatedListFull]: hasVariant(
                        $state,
                        "isNominatedListFull",
                        "isNominatedListFull"
                      )
                    })}
                  />

                  <SearchResults
                    data-plasmic-name={"searchResults"}
                    data-plasmic-override={overrides.searchResults}
                    className={classNames("__wab_instance", sty.searchResults)}
                  />
                </p.Stack>
                <div className={classNames(projectcss.all, sty.column__hl0R3)}>
                  <Nominations
                    data-plasmic-name={"nominations"}
                    data-plasmic-override={overrides.nominations}
                    className={classNames("__wab_instance", sty.nominations)}
                  />
                </div>
              </p.Stack>
            </section>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  home: [
    "home",
    "section",
    "h1",
    "link",
    "freeBox",
    "columns",
    "searchBar",
    "searchResults",
    "nominations"
  ],
  section: [
    "section",
    "h1",
    "link",
    "freeBox",
    "columns",
    "searchBar",
    "searchResults",
    "nominations"
  ],
  h1: ["h1"],
  link: ["link"],
  freeBox: ["freeBox"],
  columns: ["columns", "searchBar", "searchResults", "nominations"],
  searchBar: ["searchBar"],
  searchResults: ["searchResults"],
  nominations: ["nominations"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  home: "div";
  section: "section";
  h1: "h1";
  link: "a";
  freeBox: "div";
  columns: "div";
  searchBar: typeof SearchBar;
  searchResults: typeof SearchResults;
  nominations: typeof Nominations;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    freeBox: makeNodeComponent("freeBox"),
    columns: makeNodeComponent("columns"),
    searchBar: makeNodeComponent("searchBar"),
    searchResults: makeNodeComponent("searchResults"),
    nominations: makeNodeComponent("nominations"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
